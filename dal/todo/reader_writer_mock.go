// Code generated by mockery v2.36.0. DO NOT EDIT.

package todo

import (
	entities "github.com/hobord/poc-htmx-go-todolist/entities"
	mock "github.com/stretchr/testify/mock"
)

// MockReaderWriter is an autogenerated mock type for the ReaderWriter type
type MockReaderWriter struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *MockReaderWriter) Create(_a0 *entities.Todo) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.Todo) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *MockReaderWriter) Delete(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: user
func (_m *MockReaderWriter) GetAll(user string) ([]*entities.Todo, error) {
	ret := _m.Called(user)

	var r0 []*entities.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*entities.Todo, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(string) []*entities.Todo); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByGroup provides a mock function with given fields: user, group
func (_m *MockReaderWriter) GetByGroup(user string, group string) ([]*entities.Todo, error) {
	ret := _m.Called(user, group)

	var r0 []*entities.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]*entities.Todo, error)); ok {
		return rf(user, group)
	}
	if rf, ok := ret.Get(0).(func(string, string) []*entities.Todo); ok {
		r0 = rf(user, group)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(user, group)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *MockReaderWriter) GetByID(id string) (*entities.Todo, error) {
	ret := _m.Called(id)

	var r0 *entities.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entities.Todo, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *entities.Todo); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetCompleted provides a mock function with given fields: id, completed
func (_m *MockReaderWriter) SetCompleted(id string, completed bool) error {
	ret := _m.Called(id, completed)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, bool) error); ok {
		r0 = rf(id, completed)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetPriority provides a mock function with given fields: todos
func (_m *MockReaderWriter) SetPriority(todos []*entities.Todo) error {
	ret := _m.Called(todos)

	var r0 error
	if rf, ok := ret.Get(0).(func([]*entities.Todo) error); ok {
		r0 = rf(todos)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: _a0
func (_m *MockReaderWriter) Update(_a0 *entities.Todo) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.Todo) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockReaderWriter creates a new instance of MockReaderWriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockReaderWriter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockReaderWriter {
	mock := &MockReaderWriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
