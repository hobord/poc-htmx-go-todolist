// Code generated by mockery. DO NOT EDIT.

package todo

import (
	entities "github.com/hobord/poc-htmx-go-todolist/entities"
	mock "github.com/stretchr/testify/mock"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

// AddTodoItem provides a mock function with given fields: todoItem
func (_m *MockService) AddTodoItem(todoItem *entities.TodoItem) error {
	ret := _m.Called(todoItem)

	if len(ret) == 0 {
		panic("no return value specified for AddTodoItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.TodoItem) error); ok {
		r0 = rf(todoItem)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTodoGroup provides a mock function with given fields: todoGroup
func (_m *MockService) CreateTodoGroup(todoGroup *entities.TodoGroup) error {
	ret := _m.Called(todoGroup)

	if len(ret) == 0 {
		panic("no return value specified for CreateTodoGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.TodoGroup) error); ok {
		r0 = rf(todoGroup)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCompletedTodoItems provides a mock function with given fields: groupID
func (_m *MockService) DeleteCompletedTodoItems(groupID string) error {
	ret := _m.Called(groupID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCompletedTodoItems")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(groupID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTodoGroup provides a mock function with given fields: todoGroupID
func (_m *MockService) DeleteTodoGroup(todoGroupID string) error {
	ret := _m.Called(todoGroupID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTodoGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(todoGroupID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTodoItem provides a mock function with given fields: todoItemID
func (_m *MockService) DeleteTodoItem(todoItemID string) error {
	ret := _m.Called(todoItemID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTodoItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(todoItemID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTodoGroupByID provides a mock function with given fields: todoGroupID
func (_m *MockService) GetTodoGroupByID(todoGroupID string) (*entities.TodoGroup, error) {
	ret := _m.Called(todoGroupID)

	if len(ret) == 0 {
		panic("no return value specified for GetTodoGroupByID")
	}

	var r0 *entities.TodoGroup
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entities.TodoGroup, error)); ok {
		return rf(todoGroupID)
	}
	if rf, ok := ret.Get(0).(func(string) *entities.TodoGroup); ok {
		r0 = rf(todoGroupID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.TodoGroup)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(todoGroupID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTodoGroupsByUserID provides a mock function with given fields: userID
func (_m *MockService) GetTodoGroupsByUserID(userID string) ([]*entities.TodoGroup, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetTodoGroupsByUserID")
	}

	var r0 []*entities.TodoGroup
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*entities.TodoGroup, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) []*entities.TodoGroup); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.TodoGroup)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SortTodoItems provides a mock function with given fields: ids
func (_m *MockService) SortTodoItems(ids []string) error {
	ret := _m.Called(ids)

	if len(ret) == 0 {
		panic("no return value specified for SortTodoItems")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]string) error); ok {
		r0 = rf(ids)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTodoGroup provides a mock function with given fields: todoGroup
func (_m *MockService) UpdateTodoGroup(todoGroup *entities.TodoGroup) error {
	ret := _m.Called(todoGroup)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTodoGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.TodoGroup) error); ok {
		r0 = rf(todoGroup)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTodoItem provides a mock function with given fields: todoItem
func (_m *MockService) UpdateTodoItem(todoItem *entities.TodoItem) error {
	ret := _m.Called(todoItem)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTodoItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.TodoItem) error); ok {
		r0 = rf(todoItem)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
