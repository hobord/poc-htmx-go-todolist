// Code generated by mockery v2.36.0. DO NOT EDIT.

package todo

import (
	entities "github.com/hobord/poc-htmx-go-todolist/entities"
	mock "github.com/stretchr/testify/mock"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

// Create provides a mock function with given fields: user, group, title
func (_m *MockService) Create(user string, group string, title string) (*entities.Todo, error) {
	ret := _m.Called(user, group, title)

	var r0 *entities.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (*entities.Todo, error)); ok {
		return rf(user, group, title)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *entities.Todo); ok {
		r0 = rf(user, group, title)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(user, group, title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: user
func (_m *MockService) GetAll(user string) ([]*entities.Todo, error) {
	ret := _m.Called(user)

	var r0 []*entities.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*entities.Todo, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(string) []*entities.Todo); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllGroup provides a mock function with given fields: user
func (_m *MockService) GetAllGroup(user string) (map[string][]*entities.Todo, error) {
	ret := _m.Called(user)

	var r0 map[string][]*entities.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (map[string][]*entities.Todo, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(string) map[string][]*entities.Todo); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]*entities.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByGroup provides a mock function with given fields: user, group
func (_m *MockService) GetByGroup(user string, group string) ([]*entities.Todo, error) {
	ret := _m.Called(user, group)

	var r0 []*entities.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]*entities.Todo, error)); ok {
		return rf(user, group)
	}
	if rf, ok := ret.Get(0).(func(string, string) []*entities.Todo); ok {
		r0 = rf(user, group)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(user, group)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
